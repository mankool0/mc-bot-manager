name: Windows Release

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create release'
        required: false
        default: false
        type: boolean

defaults:
  run:
    shell: cmd

env:
  QT_VERSION: 6.10.0
  ARTIFACT: mc-bot-manager-windows.zip

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          modules: qtgrpc

      - name: Install protobuf
        run: |
          choco install protoc -y

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Deploy Qt dependencies
        working-directory: build
        run: |
          mkdir mc-bot-manager
          copy mc-bot-manager.exe mc-bot-manager\
          copy mc-bot-manager-proto.dll mc-bot-manager\
          windeployqt mc-bot-manager\mc-bot-manager.exe --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mc-bot-manager-windows
          path: build/mc-bot-manager

      - name: Package release
        if: startsWith(github.ref, 'refs/tags/v') || inputs.create_release || (github.event_name == 'push' && github.ref == 'refs/heads/master')
        working-directory: build
        run: |
          7z a ..\${{ env.ARTIFACT }} mc-bot-manager\

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ARTIFACT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manual release
        if: inputs.create_release && !startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: manual-release
          name: Manual Release
          body: Manual release build from ${{ github.sha }}
          files: ${{ env.ARTIFACT }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete previous snapshot release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: gh release delete snapshot --cleanup-tag || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create snapshot release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: snapshot
          name: Snapshot Build
          body: |
            Snapshot build from commit [${{ github.sha }}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})

            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.event.head_commit.message }}
          files: ${{ env.ARTIFACT }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
